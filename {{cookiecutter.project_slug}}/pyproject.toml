[project]
name = "{{ cookiecutter.project_slug }}"
version = "0.1.0"
description = "{{ cookiecutter.project_description }}"
authors = [
    {name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}"}
]

requires-python = ">=3.13"
readme = "README.md"
keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "pydantic>=2.0",
    "requests>=2.32",
    "python-dotenv>=1.0",
    "tqdm>=4.66",
    {% if cookiecutter.project_type in ['full', 'data_science'] or cookiecutter.include_data_science == 'y' -%}
    "pandas>=2.2",
    {% endif -%}
]

[project.optional-dependencies]
{% if cookiecutter.include_fastapi == 'y' -%}
api = [
    "fastapi>=0.111",
    "uvicorn[standard]>=0.29",
]
{% endif -%}
{% if cookiecutter.include_typer == 'y' -%}
cli = [
    "typer>=0.12",
    "rich>=13.0",
]
{% endif -%}
{% if cookiecutter.include_data_science == 'y' -%}
ds = [
    "matplotlib>=3.8",
    "seaborn>=0.13",
    "polars>=0.20",
    "scikit-learn>=1.3",
    "numpy>=1.24",
]
{% endif -%}

dev = [
    "pytest>=8.0",
    "pytest-cov>=5.0",
    "ruff>=0.4",
    "deptry>=0.12",
    "mkdocs>=1.5",
    "mkdocs-material>=9.5",
    "mkdocstrings[python]>=0.24",
    "pre-commit>=3.6",
]

{% if cookiecutter.include_typer == 'y' -%}
[project.scripts]
{{ cookiecutter.project_slug }} = "{{ cookiecutter.project_slug }}.cli:main"
{% endif %}

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
addopts = "-v --cov={{ cookiecutter.project_slug }} --cov-report=term-missing --cov-fail-under=80"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py313"
line-length = 100
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.deptry]
root = "src"
exclude = [
    ".venv",
    "tests",
    "docs",
]
ignore_obsolete = []
ignore_missing = []
ignore_transitive = []
ignore_notebooks = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
mypy_path = "src"
packages = ["{{ cookiecutter.project_slug }}"]
