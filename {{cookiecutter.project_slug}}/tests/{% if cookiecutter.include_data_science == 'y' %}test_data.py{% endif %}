{% if cookiecutter.include_data_science == 'y' -%}
import pytest
import pandas as pd
from {{ cookiecutter.project_slug }}.data import (
    load_csv,
    save_csv,
    clean_dataframe,
    get_data_summary,
    process_in_chunks
)


def test_load_csv(sample_csv_file):
    df = load_csv(sample_csv_file)
    assert isinstance(df, pd.DataFrame)
    assert len(df) == 5
    assert "name" in df.columns


def test_load_csv_nonexistent_file():
    with pytest.raises(FileNotFoundError):
        load_csv("nonexistent.csv")


def test_save_csv(sample_dataframe, temp_dir):
    output_path = temp_dir / "output.csv"
    save_csv(sample_dataframe, output_path)
    
    assert output_path.exists()
    loaded_df = pd.read_csv(output_path)
    assert len(loaded_df) == len(sample_dataframe)


def test_clean_dataframe_drop_duplicates():
    df = pd.DataFrame({
        "a": [1, 2, 2, 3],
        "b": [4, 5, 5, 6]
    })
    
    cleaned = clean_dataframe(df, drop_duplicates=True)
    assert len(cleaned) == 3


def test_clean_dataframe_drop_na():
    df = pd.DataFrame({
        "a": [1, 2, None, 4],
        "b": [5, None, 7, 8]
    })
    
    cleaned = clean_dataframe(df, drop_na_columns=["a"])
    assert len(cleaned) == 3
    assert cleaned["a"].isnull().sum() == 0


def test_clean_dataframe_fill_na():
    df = pd.DataFrame({
        "a": [1, 2, None, 4],
        "b": [5, None, 7, 8]
    })
    
    cleaned = clean_dataframe(df, fill_na_values={"a": 0, "b": -1})
    assert cleaned["a"].isnull().sum() == 0
    assert cleaned["b"].isnull().sum() == 0
    assert cleaned.loc[2, "a"] == 0
    assert cleaned.loc[1, "b"] == -1


def test_get_data_summary(sample_dataframe):
    summary = get_data_summary(sample_dataframe)
    
    assert "shape" in summary
    assert "columns" in summary
    assert "dtypes" in summary
    assert "missing_values" in summary
    assert "memory_usage" in summary
    
    assert summary["shape"] == (5, 4)
    assert len(summary["columns"]) == 4
    assert summary["missing_values"]["age"] == 1


def test_process_in_chunks(sample_dataframe):
    def double_age(chunk):
        chunk = chunk.copy()
        chunk["age"] = chunk["age"] * 2
        return chunk
    
    result = process_in_chunks(sample_dataframe, chunk_size=2, process_func=double_age)
    
    assert len(result) == len(sample_dataframe)
    assert result.loc[0, "age"] == 50  # 25 * 2
    assert result.loc[1, "age"] == 60  # 30 * 2


def test_process_in_chunks_no_func(sample_dataframe):
    result = process_in_chunks(sample_dataframe, chunk_size=2)
    pd.testing.assert_frame_equal(result, sample_dataframe)
{% endif %}
